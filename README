Stock Price Prediction using Multilevel Perceptron (MLP)
Project Overview
This project utilizes a Multilevel Perceptron (MLP) neural network to predict the stock price of Amazon. The model takes historical stock data and aims to predict the next dayâ€™s closing price using machine learning techniques, specifically leveraging a deep learning architecture. The predictions are compared against actual stock prices to evaluate the model's performance.

Project Structure
PreprocessData: This function scales the stock data using MinMaxScaler to normalize it for the model.
SplitingData: This function splits the dataset into training and testing sets, with 80% of the data used for training and 20% for testing.
BuildingModel: This function builds a Sequential model with two hidden layers using the Keras library. It utilizes the Adam optimizer and a mean_squared_error loss function.
Training: This function trains the MLP model on the training data.
Evaluating: This function evaluates the trained model on the test set and visualizes the predictions compared to the actual prices using a line graph.
LoadingData: This function loads the historical stock data from a provided CSV file URL.
Prerequisites
Make sure you have the following installed before running the project:

Python 3.x
numpy
pandas
matplotlib
scikit-learn
keras
tensorflow
You can install the dependencies using pip:

bash
Copy code
pip install numpy pandas matplotlib scikit-learn keras tensorflow
How to Use
Clone this repository:

bash
Copy code
git clone https://github.com/CeeBee99/AI_Final_Project.git
Navigate to the project directory and run the script.

The script will load the stock data for Amazon from a CSV file, preprocess it, and split it into training and testing datasets. Afterward, the MLP model will be built, trained, and evaluated on the testing data.

After training, the script will output a plot that shows the predicted stock prices against the actual prices.

Dataset
The dataset used in this project is historical stock data for Amazon, containing columns such as Date, Open, High, Low, Close, and Volume. The model is trained using the Close column, which represents the closing price for each day.

The testing and training set can be accessed from the repository.

Results
The model's performance is evaluated using Mean Squared Error (MSE) on the test set. Additionally, the predicted stock prices are plotted alongside the actual stock prices for visual comparison.

License
This project is open-source and available for modification and distribution under the MIT License.

This README provides an overview of the project's purpose, structure, and usage instructions. Let me know if you'd like to add more details.
